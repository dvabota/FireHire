@inject NavigationManager _navigationManager

@page "/cvlist/{id:int}"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using MudBlazor.Utilities;

<MudContainer>
    <Overlay isLoading=@isLoading />

	<MudItem Class="mt-5" xs="12" sm="6" md="6" lg="4">
		<MudButtonGroup OverrideStyles=@false>
			<MudButton Color="Color.Default" Size="Size.Medium" Variant="Variant.Filled" Class="m-4" OnClick="@(() => ClickBackButton())">Back</MudButton>
		</MudButtonGroup>
	</MudItem>

	<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
		<ChildContent>
			@foreach (var item in _sections)
			{
				<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column rounded-lg" Style=@("background:" + item.SectionColor + ";")>
					<MudToolBar DisableGutters="true">
						<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
						<MudSpacer />
					</MudToolBar>
					<MudDropZone T="KanbanTaskItem" Identifier="@item.Name" Class="mud-height-full" />
				</MudPaper>
			}
		</ChildContent>
		<ItemRenderer>
			<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
		</ItemRenderer>
	</MudDropContainer>

</MudContainer>

@code {
	[Parameter] public int id { get; set; }

	private bool isLoading = false;
	private MudDropContainer<KanbanTaskItem> _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		info.Item.Status = info.DropzoneIdentifier;
	}

	private async Task ClickBackButton()
	{
		_navigationManager.NavigateTo($"/vacancyCard/{id}");
	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new()
		{
			new KanBanSections("Not checked", false, String.Empty, "#FFEBEE"),
			new KanBanSections("Checked", false, String.Empty, "#F9FBE7"),
			new KanBanSections("Interview planned", false, String.Empty, "#A7FFEB"),
			new KanBanSections("Success", false, String.Empty, "#B9F6CA"),
			new KanBanSections("Trash", false, String.Empty, "#ECEFF1"),
		};

	public class KanBanSections
	{
		public string Name { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }
		public MudColor SectionColor { get; set; }

		public KanBanSections(string name, bool newTaskOpen, string newTaskName, MudColor sectionColor)
		{
			Name = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
			SectionColor = sectionColor;
		}
	}
	public class KanbanTaskItem
	{
		public string Name { get; init; }
		public string Status { get; set; }

		public KanbanTaskItem(string name, string status)
		{
			Name = name;
			Status = status;
		}
	}

	private List<KanbanTaskItem> _tasks = new()
		{
			new KanbanTaskItem("CV1 sometitle", "Not checked"),
			new KanbanTaskItem("CV1 sometitle", "Not checked"),
			new KanbanTaskItem("CV1 sometitle", "Not checked"),
		};

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

}