@using FireHire.Client.Services;
@using FireHire.Shared.Constructor;
@using FireHire.Shared.Vacancies;

@inject NavigationManager _navigationManager
@inject ClipboardService _clipboardService
@inject ISnackbar _snackbar

@page "/vacancyCard/{id:int}"

<PageTitle>Vacancy card</PageTitle>

<MudContainer>
    <Overlay isLoading=@isLoading />
    
    <EditForm Model=@vacancy OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>    
        <MudGrid>
            <MudItem Class="mt-5" xs="12" sm="6" md="6" lg="4">
                <MudButtonGroup OverrideStyles=@false>
                    <MudButton Color="Color.Default" Size="Size.Medium" Variant="Variant.Filled" Class="m-4" OnClick="@(() => ClickCVListButton())">CV list</MudButton>
                    <MudButton Color="Color.Primary" Size="Size.Medium" Variant="Variant.Filled" Class="m-4" OnClick="@(() => ClickSaveButton())">Save</MudButton>
                </MudButtonGroup>
            </MudItem>

            <MudItem xs="12" sm="12" md="12">
                <MudPaper>
                    @if (success)
                    {
                        <MudText Color="Color.Success">Успешно</MudText>
                    }
                    else
                    {
                        <MudText Color="@Color.Error">
                            <ValidationSummary />
                        </MudText>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="vacancy.Title" Label="Title" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField @bind-Value="vacancy.Description" Label="Description" Variant="Variant.Outlined" Lines="3"></MudTextField>
                    <MudTextField @bind-Value="vacancy.Requirements" Label="Requirements" Variant="Variant.Outlined" Lines="7"></MudTextField>
                    <MudTextField @bind-Value="vacancy.Skills" Label="Skills" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField @bind-Value="vacancy.Benefits" Label="Benefits" Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="vacancy.Format" Label="Format" Variant="Variant.Outlined"></MudTextField>
                <MudText>Salary</MudText>
                <MudSelect @bind-Value="vacancy.Salary.CurrencyCode" Label="Currency" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="CurrencyCodes" Value="CurrencyCodes.RUB" />
                    <MudSelectItem T="CurrencyCodes" Value="CurrencyCodes.EUR" />
                    <MudSelectItem T="CurrencyCodes" Value="CurrencyCodes.USD" />
                </MudSelect>
                <MudNumericField @bind-Value="vacancy.Salary.LowBound" Label="LowBound" Variant="Variant.Outlined" Min="0" />
                <MudNumericField @bind-Value="vacancy.Salary.HighBound" Label="HighBound" Variant="Variant.Outlined" Min="vacancy.Salary.LowBound" Max="10" />
            </MudItem>
            
            <MudItem xs="12" sm="6">
                <MudGrid>
                    @foreach(var u in units)
                    {
                        <MudItem xs=@u.XS sm=@u.SM md=@u.MD lg=@u.LG>
                                <MudBadge Origin="@Origin.TopRight" Overlap=@true Color="Color.Default" Icon="@Icons.Filled.Clear" OnClick="() => ClickRemoveUnitButton(u.Id)" Style="cursor:pointer">
                                <MudPaper Class="d-flex align-center justify-center mud-width-full pa-3" onclick=@(() => CopyUnitToClipboard(u.Id)) >@u.Title</MudPaper>
                                </MudBadge>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>

        </MudGrid>
    </EditForm>

</MudContainer>

@code {
    [Parameter] public int id { get; set; }

    private bool isLoading = false;
    private bool success;

    private Vacancy vacancy;
    private List<ConstructorUnit> units;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            vacancy = new Vacancy(1,
                "Middle/Senior Fullstack Web3 developer",
                "Friends, we are looking for Middle/Senior Fullstack web3 developer on our projects.",
                    @"
- 3+ years (ideally 5+ years) of experience as a Full-Stack software engineer
- Strong knowledge of JavaScript and its execution environments (both server-side and client-side)
- Experience with front-end JavaScript frameworks and libraries (Vue.js is a big plus)",
    "JavaScript, Vue.js is a big plus, Apache Kafka, RabbitMQ, PostgreSQL, MongoDB",
    "Any country location",
    "Full remote work, outstaff, 5/2",
    new Salary(5000, 7900, CurrencyCodes.USD)
        );

            units = new List<ConstructorUnit>()
            {
                new ConstructorUnit(1, "Friends, we are looking for professional and fan of their craft on our project."),
                new ConstructorUnit(2, "We are working with clients in various industries, including Security, Telecommunications, Healthcare, Internet, FinTech, Real Estate, Consumer Electronics, and many more."),
                new ConstructorUnit(3, "There may be other projects with great technologies, so feel free to send your CV. You are welcome!"),
                new ConstructorUnit(4, "- Company benefits - competitive salary, internal bonuses related to the company business results, other location-specific benefits"),
                new ConstructorUnit(5, "- Personal and professional development paid external training, professional literature, and e-courses"),
                new ConstructorUnit(6, "- Global team - working with a motivated and talented international team"),
                new ConstructorUnit(7, "- Relocation package for the whole family"),
                new ConstructorUnit(8, "📩Let me know if this is something you could be interested in and I’d be happy to set up a call to tell you more about opportunity."),
            };

            isLoading = false;
        }
        catch (Exception)
        {

            throw;
        }
    }


    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }


    private async Task ClickRemoveUnitButton(int id)
    {
        units.RemoveAll(u => u.Id == id);
    }


    private async Task ClickSaveButton()
    {

    }

    private async Task ClickCVListButton()
    {
        _navigationManager.NavigateTo($"/cvlist/{id}");        
    }

    private async Task CopyUnitToClipboard(int id)
    {
        await _clipboardService.WriteTextAsync(units.FirstOrDefault(u => u.Id == id).Title);
        _snackbar.Clear();
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        _snackbar.Add("Copied", Severity.Normal, config => { config.VisibleStateDuration = 100; config.ShowTransitionDuration = 400; config.HideTransitionDuration = 400; config.HideIcon = true; });
    }
}
